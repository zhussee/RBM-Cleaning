import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";
import "../styles/profilepage.css";

const ProfilePage = () => {
  const [formData, setFormData] = useState({
    first_name: "",
    last_name: "",
    patronymic: "",
    phone_number: "",
    email: "",
    avatar: null,
  });
  const [addresses, setAddresses] = useState([]);
  const [orders, setOrders] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [showReviewModal, setShowReviewModal] = useState(false);
  const [selectedOrderId, setSelectedOrderId] = useState(null);
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");

  const navigate = useNavigate();
  const token = localStorage.getItem("access_token");

  useEffect(() => {
    if (!token) {
      navigate("/login");
      return;
    }

    try {
      jwtDecode(token);
      fetchProfile();
      fetchOrders();
      fetchAddresses();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞:", err);
      handleLogout();
    }
  }, []);

  const fetchProfile = async () => {
    try {
      const res = await fetch("/api/user/profile/", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (res.status === 401) return handleLogout();

      const data = await res.json();
      setFormData({
        first_name: data.first_name || "",
        last_name: data.last_name || "",
        patronymic: data.patronymic || "",
        phone_number: data.phone_number || "",
        email: data.email || "",
        avatar: data.avatar || null,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:", err);
    }
  };

  const fetchAddresses = async () => {
    try {
      const res = await fetch("/api/user/addresses/", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (res.status === 401) return handleLogout();

      const data = await res.json();
      setAddresses(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:", err);
    }
  };

  const fetchOrders = async () => {
    try {
      const res = await fetch("/api/user/orders/", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (res.status === 401) return handleLogout();

      const data = await res.json();
      setOrders(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–æ–≤:", err);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("access_token");
    localStorage.removeItem("refresh_token");
    navigate("/login");
    window.location.reload();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSave = async () => {
    try {
      const payload = new FormData();
      for (const key in formData) {
        const value = formData[key];

        if (key === "avatar") {
          if (value instanceof File) {
            payload.append("avatar", value); 
          }
        } else if (value !== null && value !== undefined) {
          payload.append(key, value);
        }
      }

      const res = await fetch("/api/user/profile/", {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: payload,
      });

      if (res.ok) {
        await fetchProfile();
        setIsEditing(false);
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err);
    }
  };

  const handleDeleteAddress = async (addressId) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?")) return;

    try {
      const res = await fetch(`/api/user/addresses/${addressId}/`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });

      if (res.ok || res.status === 204) {
        setAddresses((prev) => prev.filter((addr) => addr.id !== addressId));
      } else {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    } catch (err) {
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.");
    }
  };

  const handleReviewSubmit = async () => {
    const response = await fetch("/api/reviews/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ order: selectedOrderId, rating, comment }),
    });

    if (response.ok) {
      setShowReviewModal(false);
      setRating(5);
      setComment("");
      fetchOrders();
    } else {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞");
    }
  };

  const renderStatus = (status) => {
    switch (status) {
      case "new":
        return "–ù–æ–≤—ã–π";
      case "confirmed":
        return "–ü—Ä–∏–Ω—è—Ç—ã–π";
      case "completed":
        return "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π";
      case "canceled":
        return "–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–π";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    }
  };

  return (
    <div className="profile-flex-container">
      {/* –º–æ–¥–∞–ª–∫–∞ */}
      {showReviewModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>–û—Ü–µ–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑</h3>
            <div className="stars">
              {[1, 2, 3, 4, 5].map((num) => (
                <span
                  key={num}
                  style={{
                    cursor: "pointer",
                    color: num <= rating ? "#ffc107" : "#ccc",
                  }}
                  onClick={() => setRating(num)}
                >
                  ‚òÖ
                </span>
              ))}
            </div>
            <textarea
              placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—Å—ë –ø—Ä–æ—à–ª–æ"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
            />
            <div className="modal-buttons">
              <button onClick={() => setShowReviewModal(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button onClick={handleReviewSubmit}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
          </div>
        </div>
      )}

      {/* –ø—Ä–æ—Ñ–∏–ª—å */}
      <div className="profile-card">
        <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
        {formData.avatar && (
          <img
            src={formData.avatar}
            alt="avatar"
            className="profile-avatar"
            style={{
              width: 100,
              height: 100,
              borderRadius: "50%",
              objectFit: "cover",
            }}
          />
        )}

        <p className="profile-name">
          {formData.last_name} {formData.first_name} {formData.patronymic}
        </p>
        <p className="profile-role">–ö–ª–∏–µ–Ω—Ç</p>
        <p className="profile-email">{formData.email}</p>
        <p className="profile-phone">{formData.phone_number}</p>

        {isEditing ? (
          <div className="profile-edit-fields">
            <label>
              –ê–≤–∞—Ç–∞—Ä:
              <input
                type="file"
                name="avatar"
                accept="image/*"
                onChange={(e) =>
                  setFormData((prev) => ({
                    ...prev,
                    avatar: e.target.files[0],
                  }))
                }
              />
            </label>
            <input
              name="last_name"
              value={formData.last_name}
              onChange={handleChange}
              placeholder="–§–∞–º–∏–ª–∏—è"
            />
            <input
              name="first_name"
              value={formData.first_name}
              onChange={handleChange}
              placeholder="–ò–º—è"
            />
            <input
              name="patronymic"
              value={formData.patronymic}
              onChange={handleChange}
              placeholder="–û—Ç—á–µ—Å—Ç–≤–æ"
            />
            <input
              name="phone_number"
              value={formData.phone_number}
              onChange={handleChange}
              placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            />
            <input
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="Email"
            />
            <div className="profile-edit-buttons">
              <button onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button onClick={() => setIsEditing(false)}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          </div>
        ) : (
          <button onClick={() => setIsEditing(true)}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
          </button>
        )}

        <button className="logout-btn" onClick={handleLogout}>
          –í—ã–π—Ç–∏
        </button>

        <hr />

        {/* –∞–¥—Ä–µ—Å–∞ */}
        <div className="profile-addresses">
          <div className="profile-addresses-title">üìç –ú–æ–∏ –∞–¥—Ä–µ—Å–∞</div>
          <ul className="profile-addresses-list">
            {addresses.map((addr) => (
              <li key={addr.id}>
                <div className="address-details">
                  <strong>
                    {addr.city}, {addr.street}, –¥.{addr.house}
                  </strong>
                  <span>–ö–≤. {addr.apartment}</span>
                  {addr.entrance && <span>–ü–æ–¥—ä–µ–∑–¥: {addr.entrance}</span>}
                  {addr.floor && <span>–≠—Ç–∞–∂: {addr.floor}</span>}
                  {addr.bathrooms && <span>–°–∞–Ω—É–∑–ª–æ–≤: {addr.bathrooms}</span>}
                </div>
                <div className="address-actions">
                  <button onClick={() => handleDeleteAddress(addr.id)}>
                    üóë
                  </button>
                </div>
              </li>
            ))}
          </ul>

          {!showForm ? (
            <button
              className="add-address-btn"
              onClick={() => setShowForm(true)}
            >
              –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å
            </button>
          ) : (
            <form
              className="address-form"
              onSubmit={async (e) => {
                e.preventDefault();
                const formData = {
                  city: e.target.city.value,
                  street: e.target.street.value,
                  house: e.target.house.value,
                  apartment: e.target.apartment.value,
                  square_meters: parseFloat(e.target.square_meters.value),
                  entrance: e.target.entrance.value,
                  floor: parseInt(e.target.floor.value),
                  bathrooms: parseInt(e.target.bathrooms.value),
                };

                const res = await fetch(
                  "https://rbm-cleaning.kz/api/addresses/",
                  {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: `Bearer ${token}`,
                    },
                    body: JSON.stringify(formData),
                  }
                );

                if (res.ok) {
                  alert("–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω");
                  fetchAddresses();
                  setShowForm(false);
                  e.target.reset();
                } else {
                  alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞");
                }
              }}
            >
              <input type="text" name="city" placeholder="–ì–æ—Ä–æ–¥" required />
              <input type="text" name="street" placeholder="–£–ª–∏—Ü–∞" required />
              <input type="text" name="house" placeholder="–î–æ–º" required />
              <input
                type="text"
                name="apartment"
                placeholder="–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              />
              <input
                type="number"
                name="square_meters"
                placeholder="–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º¬≤)"
                required
              />
              <input type="text" name="entrance" placeholder="–ü–æ–¥—ä–µ–∑–¥" />
              <input type="number" name="floor" placeholder="–≠—Ç–∞–∂" />
              <input
                type="number"
                name="bathrooms"
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤"
              />
              <button type="submit" className="add-address-btn">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </form>
          )}
        </div>
      </div>

      <div className="orders-card">
        <h2>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
        {orders.length === 0 ? (
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
        ) : (
          [...orders].reverse().map((order) => (
            <div key={order.id} className="order-box">
              <div className="order-top">
                <strong>{order.company_name}</strong>
                <span className={`order-status ${order.status}`}>
                  {renderStatus(order.status)}
                </span>
              </div>
              <p>üìç {order.address_name}</p>
              <p>üë§ {order.employee_name || "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}</p>
              <p>
                <strong>–ü–æ–∂–µ–ª–∞–Ω–∏—è:</strong> {order.comment}
              </p>
              <p>
                <strong>–£—Å–ª—É–≥–∞:</strong> {order.service_name} ‚Äî{" "}
                {order.total_amount?.toLocaleString()} ‚Ç∏
              </p>

              {order.status === "completed" && !order.has_review && (
                <button
                  className="review-btn"
                  onClick={() => {
                    setSelectedOrderId(order.id);
                    setShowReviewModal(true);
                  }}
                >
                  –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                </button>
              )}

              {order.status === "completed" && order.has_review && (
                <p className="review-exists">–û—Ç–∑—ã–≤ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω</p>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default ProfilePage;
