import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import "../styles/checkoutpage.css";

const CheckoutPage = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const searchParams = new URLSearchParams(location.search);
  const serviceId = parseInt(searchParams.get("service"));
  const companyId = parseInt(searchParams.get("company"));

  const [addresses, setAddresses] = useState([]);
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [service, setService] = useState(null);
  const [total, setTotal] = useState(null);
  const [time, setTime] = useState("08:00‚Äì10:00");
  const [date, setDate] = useState("");
  const [extraServices, setExtraServices] = useState({
    windows: false,
    balcony: false,
  });
  const [employees, setEmployees] = useState([]);
  const [selectedEmployee, setSelectedEmployee] = useState("");
  const [paymentType, setPaymentType] = useState("cash");
  const [comment, setComment] = useState("");

  const today = new Date().toISOString().split("T")[0];

  useEffect(() => {
    const token = localStorage.getItem("access_token");

    if (token) {
      fetch("http://rbm-cleaning.kz/api/user/addresses/", {
        headers: { Authorization: `Bearer ${token}` },
      })
        .then((res) => res.json())
        .then((data) => {
          if (Array.isArray(data) && data.length > 0) {
            setAddresses(data);
            setSelectedAddress(data[0].id);
          }
        });

      fetch(`/api/company/public/employees/${companyId}/`)
        .then((res) => res.json())
        .then((data) => setEmployees(data));
    }

    if (companyId && serviceId) {
      fetch(`/api/company/${companyId}/`)
        .then((res) => res.json())
        .then((data) => {
          const found = data.services.find((s) => s.id === serviceId);
          setService(found);
        });
    }
  }, [companyId, serviceId]);

  useEffect(() => {
    const addr = addresses.find((a) => a.id === parseInt(selectedAddress));
    if (addr && service) {
      let base = addr.square_meters * parseFloat(service.price_per_m2);
      if (extraServices.windows) base += 1500;
      if (extraServices.balcony) base += 2000;
      setTotal(base.toFixed(2));
    }
  }, [selectedAddress, service, addresses, extraServices]);

  useEffect(() => {
    const token = localStorage.getItem("access_token");

    if (token && companyId) {
      fetch(`/api/company/public/employees/${companyId}/`)
        .then((res) => res.json())
        .then((data) => {
          setEmployees(data);
        });
    }
  }, [companyId]);

  useEffect(() => {
    const script = document.createElement("script");
    script.src = "https://test-epay.homebank.kz/payform/payment-api.js";
    script.async = true;

    script.onload = () => console.log("‚úÖ –°–∫—Ä–∏–ø—Ç Epay –∑–∞–≥—Ä—É–∂–µ–Ω");
    script.onerror = () => console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç Epay");

    document.body.appendChild(script);
  }, []);

  const handleCheckout = async () => {
    const token = localStorage.getItem("access_token");
    const additional_services = [
      ...(extraServices.windows ? [1] : []),
      ...(extraServices.balcony ? [2] : []),
    ];

    const orderData = {
      address: selectedAddress,
      service: serviceId,
      cleaning_date: date,
      cleaning_time: time,
      additional_services,
      payment_type: paymentType,
      comment,
    };

    if (selectedEmployee && selectedEmployee !== "") {
      const employeeId = parseInt(selectedEmployee);
      if (!isNaN(employeeId)) {
        orderData.employee = employeeId;
      }
    }

    try {
      const response = await fetch("/api/orders/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(orderData),
      });

      const data = await response.json();

      if (!response.ok) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏:", data);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
        return;
      }

      // üí≥ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
      if (data.payment_required && paymentType === "card") {
        const paymentObject = {
          invoiceId: data.order_id.toString().padStart(8, "0"),
          terminal: "67e34d63-102f-4bd1-898e-370781d0074d",
          amount: data.amount.toString(), // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫–æ–π
          currency: "KZT",
          auth: data.access_token,
          backLink: "http://rbm-cleaning.kz/profile",
          failureBackLink: "http://rbm-cleaning.kz/payment-failed",
          autoBackLink: true,
          description: "–û–ø–ª–∞—Ç–∞ –∫–ª–∏–Ω–∏–Ω–≥–∞",
          language: "rus",
          accountId: "testuser1",
          phone: "77000000000",
          name: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
          email: "test@example.com",
          lifetime: 900,
        };

        if (
          typeof window.halyk === "undefined" ||
          typeof window.halyk.pay !== "function"
        ) {
          alert("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
          console.error("‚ùå window.halyk –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
          return;
        }

        console.log("üîÅ –ó–∞–ø—É—Å–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Halyk...", paymentObject);
        window.halyk.pay(paymentObject);
      } else {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏ Kaspi –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö
        navigate("/profile");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏");
    }
  };

  const timeSlots = [
    "08:00‚Äì10:00",
    "11:00‚Äì13:00",
    "14:00‚Äì16:00",
    "17:00‚Äì19:00",
    "20:00‚Äì22:00",
  ];

  return (
    <section className="cleaning_data">
      <h1 className="cleaning_data_title">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

      <div className="cleaning_data_block">
        <p className="cleaning_data_subtitle">–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</p>
        <p className="cleaning_data_desc">{service?.name_service}</p>

        {addresses.length > 0 ? (
          <>
            <label className="cleaning_data_subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å</label>
            <select
              value={selectedAddress || ""}
              onChange={(e) => setSelectedAddress(e.target.value)}
              className="cleaning_data_address_dropdown"
            >
              {addresses.map((addr) => (
                <option key={addr.id} value={addr.id}>
                  {addr.city}, {addr.street}, –¥.{addr.house}
                </option>
              ))}
            </select>
          </>
        ) : (
          <p>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</p>
        )}

        <label className="cleaning_data_subtitle" style={{ marginTop: "20px" }}>
          –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —É–±–æ—Ä–∫–∏
        </label>
        <input
          type="date"
          value={date}
          min={today}
          onChange={(e) => setDate(e.target.value)}
          className="cleaning_data_address_dropdown"
        />

        <label className="cleaning_data_subtitle" style={{ marginTop: "20px" }}>
          –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è
        </label>
        <select
          value={time}
          onChange={(e) => setTime(e.target.value)}
          className="cleaning_data_address_dropdown small-select"
        >
          {timeSlots.map((slot) => (
            <option key={slot} value={slot}>
              {slot}
            </option>
          ))}
        </select>

        <div className="cleaning_data_row">
          <label className="cleaning_data_subtitle">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</label>
          <select
            value={selectedEmployee}
            onChange={(e) => {
              const value = e.target.value;
              setSelectedEmployee(value);
            }}
            className="cleaning_data_address_dropdown"
          >
            <option value="">–ë–µ–∑ –≤—ã–±–æ—Ä–∞</option>
            {employees && employees.length > 0 ? (
              employees.map((emp, index) => (
                <option key={`emp-${index}`} value={emp.id}>
                  {emp.first_name || ""} {emp.surname || ""}
                </option>
              ))
            ) : (
              <option disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</option>
            )}
          </select>
        </div>

        <div className="cleaning_data_row">
          <label className="cleaning_data_subtitle">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
          <select
            value={paymentType}
            onChange={(e) => setPaymentType(e.target.value)}
            className="cleaning_data_address_dropdown"
          >
            <option value="cash">–ù–∞–ª–∏—á–Ω—ã–º–∏</option>
            <option value="card">–ö–∞—Ä—Ç–æ–π</option>
            <option value="kaspi">Kaspi QR</option>
          </select>
        </div>

        <div className="cleaning_data_row">
          <label className="cleaning_data_subtitle">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
          <textarea
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            className="cleaning_data_textarea"
            rows={3}
          />
        </div>

        <div className="cleaning_data_services_list">
          <p className="cleaning_data_subtitle">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</p>
          <label>
            <input
              type="checkbox"
              checked={extraServices.windows}
              onChange={(e) =>
                setExtraServices((prev) => ({
                  ...prev,
                  windows: e.target.checked,
                }))
              }
            />{" "}
            –ú—ã—Ç—å–µ –æ–∫–æ–Ω (+1500 ‚Ç∏)
          </label>
          <label>
            <input
              type="checkbox"
              checked={extraServices.balcony}
              onChange={(e) =>
                setExtraServices((prev) => ({
                  ...prev,
                  balcony: e.target.checked,
                }))
              }
            />{" "}
            –£–±–æ—Ä–∫–∞ –±–∞–ª–∫–æ–Ω–∞ (+2000 ‚Ç∏)
          </label>
        </div>

        {total && (
          <div className="cleaning_data_order_sum">
            –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <span>{parseFloat(total).toLocaleString()} ‚Ç∏</span>
          </div>
        )}

        <button
          className="cleaning_data_submit_btn"
          disabled={!selectedAddress || !total || !time || !date}
          onClick={handleCheckout}
        >
          –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
        </button>
      </div>
    </section>
  );
};

export default CheckoutPage;
